[{"/Users/khazzamAir/Documents/GitHub/theShoppies2021/the-shoppies/src/App.tsx":"1","/Users/khazzamAir/Documents/GitHub/theShoppies2021/the-shoppies/src/index.tsx":"2","/Users/khazzamAir/Documents/GitHub/theShoppies2021/the-shoppies/src/MovieNominationItem.tsx":"3","/Users/khazzamAir/Documents/GitHub/theShoppies2021/the-shoppies/src/SearchBar.tsx":"4","/Users/khazzamAir/Documents/GitHub/theShoppies2021/the-shoppies/src/NominationsList.tsx":"5"},{"size":4995,"mtime":1610300087872,"results":"6","hashOfConfig":"7"},{"size":196,"mtime":1610223726163,"results":"8","hashOfConfig":"7"},{"size":652,"mtime":1610223726162,"results":"9","hashOfConfig":"7"},{"size":979,"mtime":1610228411889,"results":"10","hashOfConfig":"11"},{"size":462,"mtime":1610223726162,"results":"12","hashOfConfig":"11"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"11lddtq",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15yq1y9",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/khazzamAir/Documents/GitHub/theShoppies2021/the-shoppies/src/App.tsx",["24"],"import React, { useState, useEffect, StrictMode } from 'react';\nimport { NominationsList } from './NominationsList';\nimport { SearchBar } from './SearchBar';\nimport './styles.css';\nimport load from './loading.gif'\n// import \"babel-polyfill\";\n// import SimpleStorage from \"react-simple-storage\";\n// import {loadState, saveState} from './localStorage';\n/*\nSome of the code for using the OMDB API was inspired by: https://webomnizz.com/react-hooks-and-omdb-api-example/\n*/\n\n/*\nDone:\n- Add three containers + text\n- Add nominate buttons\n- Call addNomination with nomination button\n- Add remove functionality\n- Shopify icon logo on tab\n- Add api searches\n- Disable Nominate button\n- Display a banner at 5 nominations\n- Add error banner\n- Write \"The Shoppies\" in shopify font\n\nTodo:\n- Add error possibility cases (from resource)\n\nTo check\n\nBonus\n- I love it! vs Don't like it anymore :(\n- Add images\n- Add functionality to momentarily toggle nominated movies\n- Add recent searches\n\n- Save nomination lists if the user leaves the page\n- Animations for loading, adding/deleting movies, notifications\n- Create shareable links\n\nAesthetics\n- Find better way to style objects\n- Full screen is \"The Shoppies\"\n- Add instructions\n- This movie has not been created yet, maybe you should give it a shot?\n\n*/\n\n\nconst API_KEY = '9fefc733';\n\nconst initialNominations: MovieNomination[] = [];\n\nfunction App() {\n  const [nominations, setNominations] = useState(initialNominations);\n  const [nominationCount, setNominationCount] = useState(0);\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [queryText, setQuery] = useState('shop');\n\n  //if the movie has not already been nominated and there are less than 5 nominations, nominate it\n  const nominateMovie = (chosenMovie: MovieNomination) => {\n    if (!(nominations.some(item => chosenMovie.imdbID === item.imdbID)) && nominationCount < 5) {\n      setNominations([...nominations, chosenMovie]);\n      setNominationCount(nominationCount+1);\n    }\n  };\n\n  //remove the movie from the list of nominations\n  const removeMovie = (chosenMovie: MovieNomination) => {\n    const filteredist = nominations.filter((movie) => movie !== chosenMovie);\n    setNominations(filteredist);\n    setNominationCount(nominationCount-1);\n  };\n  \n  useEffect(() => {\n      setLoading(true);\n      setError(null);\n      setData([]);\n      fetch(`https://www.omdbapi.com/?s=${queryText}&apikey=${API_KEY}`)\n      .then(resp => resp)\n      .then(resp => resp.json())\n      .then(response => {\n          if (response.Response === 'False') {\n              setError(response.Error);\n          }\n          else {\n              setData(response.Search);\n          }\n\n          setLoading(false);\n      })\n      .catch(({message}) => {\n          setError(message);\n          setLoading(false);\n      })\n\n  }, [queryText]);\n\n  interface Props {\n    Title: string;\n    Year: number;\n    Poster: string;\n    imdbID: string;\n    nominated: boolean;\n    nominateMovie: NominateMovie;\n  }\n  \n  const MovieResultItem: React.FC<Props> = ({Title, Year, Poster, imdbID, nominateMovie }) => {\n    return (\n      <div className=\"singleMovie\">\n        {Title + \" (\" + Year + \") \"}\n        <button\n          type=\"submit\"\n          disabled={nominations.some(item => imdbID === item.imdbID)}\n          onClick={() => {\n              nominateMovie({Title, Year, Poster, imdbID});\n          }}\n        >\n          Nominate\n        </button>\n        <img className=\"poster\"\n          alt={Title}\n          src={Poster === 'N/A' ? 'https://placehold.it/198x264&text=Image+Not+Found' : Poster}\n        />\n      </div>\n    );\n  };\n\n  // const Loader = () => (\n  //   <div style={{margin: '20px 0', textAlign: 'center'}}>\n  //       <Spin />\n  //   </div>\n  // )\n\n  // this.subscribe(() => {\n  //   saveState(nominations.getState());\n  // })\n\n  return (\n    <div className=\"bigContainer\">\n      <div>\n        <h2>Look up your top movies!</h2>\n        <SearchBar setSearchText={value => setQuery(value)} />\n      </div>\n        {/* <SimpleStorage parent={this} /> */}\n\n\n      <div>\n        <h2>Nominations</h2>\n        <NominationsList nominations={nominations} removeMovie={removeMovie} />\n      </div>\n\n      {/* <div className=\"mainContainer\"> */}\n      <h2>Results for \"{queryText}\"</h2>\n        <div className=\"movieListContainer\">\n          { loading && \n              <img src={load} alt=\"loading...\" />\n          }\n\n          { error !== null &&\n              <div style={{margin: '20px 0'}}>\n                  {error}\n              </div>\n          }\n          \n          { data !== null && data.length > 0 && data.map((result, index) => (\n            <MovieResultItem key={index} nominateMovie={nominateMovie} {...result} />\n          ))}\n        </div>\n\n      {/* </div> */}\n      {nominationCount === 5 && <p>You have already nominated 5 movies, which is the maximum allowed!</p>}\n    </div>\n  );\n}\n\nexport default App;","/Users/khazzamAir/Documents/GitHub/theShoppies2021/the-shoppies/src/index.tsx",[],"/Users/khazzamAir/Documents/GitHub/theShoppies2021/the-shoppies/src/MovieNominationItem.tsx",[],"/Users/khazzamAir/Documents/GitHub/theShoppies2021/the-shoppies/src/SearchBar.tsx",[],"/Users/khazzamAir/Documents/GitHub/theShoppies2021/the-shoppies/src/NominationsList.tsx",[],{"ruleId":"25","severity":1,"message":"26","line":1,"column":38,"nodeType":"27","messageId":"28","endLine":1,"endColumn":48},"@typescript-eslint/no-unused-vars","'StrictMode' is defined but never used.","Identifier","unusedVar"]