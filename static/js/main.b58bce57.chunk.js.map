{"version":3,"sources":["MovieNominationItem.tsx","NominationsList.tsx","SearchBar.tsx","App.tsx","index.tsx"],"names":["MovieNominationItem","movie","removeMovie","className","Title","Year","type","onClick","alt","src","Poster","NominationsList","nominations","map","SearchBar","setSearchText","useState","text","setText","href","action","placeholder","name","value","onChange","e","target","preventDefault","initialNominations","App","setNominations","nominationCount","setNominationCount","nominateMovie","chosenMovie","some","item","imdbID","data","setData","error","setError","loading","setLoading","queryText","setQuery","useEffect","fetch","then","resp","json","response","Response","Error","Search","catch","message","MovieResultItem","disabled","filteredist","filter","style","margin","length","result","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b58bce57.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  movie: MovieNomination;\n  removeMovie: NominateMovie;\n}\n\nexport const MovieNominationItem: React.FC<Props> = ({ movie, removeMovie }) => {\n  return (\n    <div className=\"singleMovie\">\n        {movie.Title + \" (\" + movie.Year + \") \"}\n        <button\n            type=\"submit\"\n            onClick={() => {\n                removeMovie(movie);\n            }}\n        >\n            Remove\n        </button>\n        <img className=\"poster\"\n            alt={movie.Title}\n            src={movie.Poster === 'N/A' ? 'https://placehold.it/198x264&text=Image+Not+Found' : movie.Poster}\n        />\n    </div>\n  );\n};\n","import React from 'react';\nimport { MovieNominationItem } from './MovieNominationItem';\n\ninterface Props {\n  nominations: MovieNomination[];\n  removeMovie: NominateMovie;\n}\n\nexport const NominationsList: React.FC<Props> = ({ nominations, removeMovie }) => {\n  return (\n    <div className=\"movieListContainer\">\n      {nominations.map(movie => (\n        <MovieNominationItem key={movie.Title} movie={movie} removeMovie={removeMovie} />\n      ))}\n    </div>\n  );\n};","import React, {useState} from 'react';\n\n/*\nSearch bar inspired by https://www.w3schools.com/howto/howto_css_searchbar.asp\n*/\n\ninterface Props {\n    setSearchText: SetSearchText;\n}\n\nexport const SearchBar: React.FC<Props> = ({setSearchText}) => {\n\n    const [text, setText] = useState('');\n\n    return (\n        <div className=\"topnav\">\n          <a href=\"#contact\">\n            <div className=\"search-container\">\n                <form action=\"/action_page.php\">\n                <input type=\"text\" placeholder=\"Search..\" name=\"search\" value={text}\n                    onChange={e => {\n                    setText(e.target.value);\n                    }}/>\n                    <button type=\"submit\" onClick={e => {\n                    e.preventDefault();\n                    setSearchText(text);\n                    setText('');\n                    }}><i className=\"fa fa-search\"></i></button>\n                </form>\n                </div>\n            </a>\n        </div>\n    );\n};","import React, { useState, useEffect } from 'react';\nimport { NominationsList } from './NominationsList';\nimport { SearchBar } from './SearchBar';\nimport './styles.css';\n\n/*\nDone:\n- Add three containers + text\n- Add nominate buttons\n- Call addNomination with nomination button\n- Add remove functionality\n- Shopify icon logo on tab\n- Add api searches\n- Disable Nominate button\n- Display a banner at 5 nominations\n- Add error banner\n\nTodo:\n- Add error possibility cases (from resource)\n\nTo check\n\nBonus\n- I love it! vs Don't like it anymore :(\n- Add images\n- Add functionality to momentarily toggle nominated movies\n- Add recent searches\n\n- Save nomination lists if the user leaves the page\n- Animations for loading, adding/deleting movies, notifications\n- Create shareable links\n\nAesthetics\n- Add magnifying class\n- Find better way to style objects\n- Write \"The Shoppies\" in shopify font\n- Full screen is \"The Shoppies\"\n- Add instructions\n\n*/\n\n\nconst API_KEY = '9fefc733';\n\nconst initialNominations: MovieNomination[] = [];\n\nfunction App() {\n  const [nominations, setNominations] = useState(initialNominations);\n  const [nominationCount, setNominationCount] = useState(0); //TODO: Is this the best style?\n\n  //if the movie has not already been nominated and there are less than 5 nominations, nominate it\n  const nominateMovie = (chosenMovie: MovieNomination) => {\n    if (!(nominations.some(item => chosenMovie.imdbID === item.imdbID)) && nominationCount < 5) {\n      setNominations([...nominations, chosenMovie]);\n      setNominationCount(nominationCount+1);\n    }\n  };\n\n  //remove the movie from the list of nominations\n  const removeMovie = (chosenMovie: MovieNomination) => {\n    const filteredist = nominations.filter((movie) => movie !== chosenMovie);\n    setNominations(filteredist);\n    setNominationCount(nominationCount-1);\n  };\n  \n\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [queryText, setQuery] = useState('shop');\n\n  useEffect(() => {\n      setLoading(true);\n      setError(null);\n      setData([]);\n      fetch(`https://www.omdbapi.com/?s=${queryText}&apikey=${API_KEY}`)\n      .then(resp => resp)\n      .then(resp => resp.json())\n      .then(response => {\n          if (response.Response === 'False') {\n              setError(response.Error);\n          }\n          else {\n              setData(response.Search);\n          }\n\n          setLoading(false);\n      })\n      .catch(({message}) => {\n          setError(message);\n          setLoading(false);\n      })\n\n  }, [queryText]);\n\n  interface Props {\n    Title: string;\n    Year: number;\n    Poster: string;\n    imdbID: string;\n    nominated: boolean;\n    nominateMovie: NominateMovie;\n  }\n  \n  const MovieResultItem: React.FC<Props> = ({Title, Year, Poster, imdbID, nominateMovie }) => {\n    return (\n      <div className=\"singleMovie\">\n        {Title + \" (\" + Year + \") \"}\n        <button\n          type=\"submit\"\n          disabled={nominations.some(item => imdbID === item.imdbID)}\n          onClick={() => {\n              nominateMovie({Title, Year, Poster, imdbID});\n          }}\n        >\n          Nominate\n        </button>\n        <img className=\"poster\"\n          alt={Title}\n          src={Poster === 'N/A' ? 'https://placehold.it/198x264&text=Image+Not+Found' : Poster}\n        />\n      </div>\n    );\n  };\n\n  // const Loader = () => (\n  //   <div style={{margin: '20px 0', textAlign: 'center'}}>\n  //       <Spin />\n  //   </div>\n  // )\n\n  return (\n    <div className=\"bigContainer\">\n      <div>\n        <h2>Look up your top movies!</h2>\n        <SearchBar setSearchText={value => setQuery(value)} />\n      </div>\n\n\n      <div>\n        <h2>Nominations</h2>\n        <NominationsList nominations={nominations} removeMovie={removeMovie} />\n      </div>\n\n      {/* <div className=\"mainContainer\"> */}\n      <h2>Results for \"{queryText}\"</h2>\n        <div className=\"movieListContainer\">\n          { loading && <h1>I'm loading</h1>\n              // <iframe src=\"https://giphy.com/embed/3oEjI6SIIHBdRxXI40\" width=\"480\" height=\"480\" frameBorder=\"0\" title=\"loading_gif\" allowFullScreen></iframe>\n          }\n\n          { error !== null &&\n              <div style={{margin: '20px 0'}}>\n                  {error}\n              </div>\n          }\n          \n          { data !== null && data.length > 0 && data.map((result, index) => (\n            <MovieResultItem key={index} nominateMovie={nominateMovie} {...result} />\n          ))}\n        </div>\n\n      {/* </div> */}\n      {nominationCount === 5 && <p>You have already nominated 5 movies, which is the maximum allowed!</p>}\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}